{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# `Model.py` Sample Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is our sample test for our model_1.py. Using preprocessed_data.csv as the data set. Here we test our model using input book title 'Harry Potter and the Order of the Phoenix (Book 5)'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.extend([\"../src\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from book_recommender.model import item_based_recommender\n",
    "from book_recommender.model import content_based_recommender\n",
    "from book_recommender.model import custom_recommender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "import book_recommender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1;31mType:\u001b[0m        module\n",
      "\u001b[1;31mString form:\u001b[0m <module 'book_recommender' from 'd:\\\\ECE229\\\\test-book\\\\book-recommender\\\\doc\\\\../src\\\\book_recommender\\\\__init__.py'>\n",
      "\u001b[1;31mFile:\u001b[0m        d:\\ece229\\test-book\\book-recommender\\src\\book_recommender\\__init__.py\n",
      "\u001b[1;31mDocstring:\u001b[0m   Dive into Book.\n"
     ]
    }
   ],
   "source": [
    "book_recommender?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from book_recommender.app_flask import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = pd.read_csv('datasets/Preprocessed_data.csv')\n",
    "df = books.copy()\n",
    "\n",
    "df.dropna(inplace=True)\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "df.drop(columns=['Unnamed: 0', 'location', 'isbn',\n",
    "                    'img_s', 'img_m', 'city', 'age',\n",
    "                    'state', 'Language', 'country',\n",
    "                    'year_of_publication'], axis=1, inplace=True)\n",
    "df.drop(index=df[df['Category'] == '9'].index, inplace=True)  # remove 9 in category\n",
    "\n",
    "df.drop(index=df[df['rating'] == 0].index, inplace=True)  # remove 0 in rating\n",
    "\n",
    "df['Category'] = df['Category'].apply(lambda x: re.sub('[\\W_]+', ' ', x).strip())\n",
    "\n",
    "titles1, imgs1 = item_based_recommender(df,'Harry Potter and the Order of the Phoenix (Book 5)')\n",
    "titles2, imgs2 = content_based_recommender(df,'Harry Potter and the Order of the Phoenix (Book 5)')\n",
    "titles3, imgs3 = custom_recommender(df,'Harry Potter and the Order of the Phoenix (Book 5)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we output the book titles and corresponding images based on out item_based_recommender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Timeline',\n",
       " 'Snow Falling on Cedars',\n",
       " 'The Summons',\n",
       " 'A Painted House',\n",
       " 'The Secret Life of Bees']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['http://images.amazon.com/images/P/0345417623.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/067976402X.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0440241073.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/044023722X.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0142001740.01.LZZZZZZZ.jpg']"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imgs1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we output the book titles and corresponding images based on our content_based_recommender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Harry Potter and the Chamber of Secrets (Book 2)',\n",
       " 'Harry Potter and the Prisoner of Azkaban (Book 3)',\n",
       " 'Harry Potter and the Goblet of Fire (Book 4)',\n",
       " \"Harry Potter and the Sorcerer's Stone (Book 1)\",\n",
       " \"Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))\"]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['http://images.amazon.com/images/P/0439064864.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0439136350.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0439139597.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0590353403.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/059035342X.01.LZZZZZZZ.jpg']"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imgs2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we out put book titles and corresponding images based on our custom_recommender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Timeline',\n",
       " 'Harry Potter and the Chamber of Secrets (Book 2)',\n",
       " 'Harry Potter and the Prisoner of Azkaban (Book 3)',\n",
       " 'Harry Potter and the Goblet of Fire (Book 4)',\n",
       " \"Harry Potter and the Sorcerer's Stone (Harry Potter (Paperback))\"]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titles3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['http://images.amazon.com/images/P/0345417623.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0439064864.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0439136350.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/0439139597.01.LZZZZZZZ.jpg',\n",
       " 'http://images.amazon.com/images/P/059035342X.01.LZZZZZZZ.jpg']"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imgs3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "{func}`book_recommender.model_1.recommendations`\n",
    "\n",
    "{func}`test_book.model_1.get_book_title`\n",
    "\n",
    "{mod}`book_recommender.app_flask`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "6d03412221bfc6bd3b4c76211a40e326eeaef1dd2dbe7d283da4a6f49456bc7e"
  },
  "kernelspec": {
   "display_name": "Python 3.10.4 ('ai')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
